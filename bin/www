#!/usr/bin/env node

/**
 * Module dependencies.
 */
const fs = require('fs')

var ip = require('underscore')
    .chain(require('os').networkInterfaces())
    .values()
    .flatten()
    .find({family: 'IPv4', internal: false})
    .value()
    .address;

    if(ip=='213.8.152.171'){
      process.env.NODE_ENV = "prod"
    }else{
      process.env.NODE_ENV = "development"
    }
    // process.env.NODE_ENV = "prod"


switch (process.env.NODE_ENV) {
  case 'development':
      console.log('run on development Mode');
      require('dotenv').config({ path: './config/.env' });
      break;
  case 'prod':
      console.log('run on production Mode');
      require('dotenv').config({ path: './config/.envProd' });
      break;
}
console.log(process.env.pBaseURL);

var app = require('../app');
var debug = require('debug')('ticket4me:server');
var http = require('http');
var https = require('https');



let privateKey = fs.readFileSync('./config/stream3_web_org_il_key.pem');
let certificate = fs.readFileSync('./config/stream3_web_org_il.crt.pem');



/**
 * Get port from environment and store in Express.
 */
 
var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

switch (process.env.NODE_ENV) {
  case 'development':
    // var server = https.createServer({ key: privateKey, cert: certificate }, app)
    // להחליף לפני העלאה
    var server = http.createServer(app);
    break;
    case 'prod':
    // *** fixme ***
    // var server = http.createServer(app);
    var server = https.createServer({ key: privateKey, cert: certificate }, app)
    break;
}



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
